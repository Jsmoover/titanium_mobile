/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.modules.titanium.shape;

import java.util.ArrayList;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiUIHelper;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.app.NativeActivity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.shapes.Shape;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.widget.LinearLayout;


// This proxy can be created by calling Android.createExample({message: "hello world"})
@SuppressWarnings({"unused", "unchecked", "rawtypes"})
@Kroll.proxy(name = "View", creatableInModule = ShapeModule.class, propertyAccessors = {
})
public class ShapeViewProxy extends TiViewProxy {
	// Standard Debugging variables
	private static final String TAG = "ShapeViewProxy";
	
	private final ArrayList<ShapeProxy> mShapes;
	
	protected class ShapeView extends TiCompositeLayout {

		public ShapeView(Context context) {
			super(context);
		}
		@Override 
		protected void onDraw(Canvas canvas) {
			for (int i = 0; i < mShapes.size(); i++) {
				ShapeProxy shapeProxy = mShapes.get(i);
				shapeProxy.drawOnCanvas(canvas);
			}
		}
	}

	protected class TiShapeView extends TiUIView {
		protected ShapeView nativeView;
		private Rect nativeViewBounds;
		
		protected void onLayoutChanged(int left, int top, int right, int bottom) {
			nativeViewBounds.set(0, 0, right - left, bottom - top);
			for (int i = 0; i < mShapes.size(); i++) {
				ShapeProxy shapeProxy = mShapes.get(i);
				shapeProxy.onLayoutChanged(nativeView.getContext(), nativeViewBounds);
			}
//			nativeView.requestLayout();
		}
		
		public void update(){
			for (int i = 0; i < mShapes.size(); i++) {
				ShapeProxy shapeProxy = mShapes.get(i);
				shapeProxy.onLayoutChanged(nativeView.getContext(), nativeViewBounds);
			}
		}

		protected void createNativeView(Activity activity) {
			nativeView = new ShapeView(activity) {
				@Override
				protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
					super.onLayout(changed, left, top, right, bottom);
					if (changed) {
						
						onLayoutChanged( left, top, right, bottom);
						TiUIHelper.firePostLayoutEvent(proxy);
					}
				}
				
//				@Override
//				protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
//				{
//					int childCount = getChildCount();
//					int wSuggested = getSuggestedMinimumWidth();
//					int hSuggested = getSuggestedMinimumHeight();
//
//					int maxWidth = 0;
//					int maxHeight = 0;
//
//					// account for padding
//					maxWidth += getPaddingLeft() + getPaddingRight();
//					maxHeight += getPaddingTop() + getPaddingBottom();
//
//					// check minimums
//					maxWidth = Math.max(maxWidth, wSuggested);
//					maxHeight = Math.max(maxHeight, hSuggested);
//
//					int measuredWidth = getMeasuredWidth(maxWidth, widthMeasureSpec);
//					int measuredHeight = getMeasuredHeight(maxHeight,heightMeasureSpec);
//					setMeasuredDimension(measuredWidth, measuredHeight);
//				}

			};
			setNativeView(nativeView);
		}


		public TiShapeView(final TiViewProxy proxy, Activity activity) {
			super(proxy);
			nativeViewBounds = new Rect();
			createNativeView(activity);
		}

		@Override
		public void processProperties(KrollDict d) {
			
			super.processProperties(d);
			
			Context context = nativeView.getContext();
		}

		@Override
		public void release() {
			super.release();
			nativeView = null;
		}
		
		public void redrawNativeView() {
			super.redrawNativeView();
		}
		
		@Override
		protected void handleTouchEvent(MotionEvent event) {
			super.handleTouchEvent(event);
			String motionEvent = motionEvents.get(event.getAction());
			if (motionEvent != null) {
				KrollDict dict = dictFromEvent(event);
				for (int i = 0; i < mShapes.size(); i++) {
					ShapeProxy shapeProxy = mShapes.get(i);
					shapeProxy.handleTouchEvent(motionEvent, event, dict);
				}
			}
		}
	}

	// Constructor
	public ShapeViewProxy() {
		super();
		mShapes = new ArrayList<ShapeProxy>();
	}

	@Override
	public TiUIView createView(Activity activity) {
		TiUIView view = new TiShapeView(this, activity);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}
	

	
	@Override
	public TiUIView getOrCreateView()
	{
		TiUIView view =  super.getOrCreateView(true);
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options) {
		Log.d(TAG, "handleCreationDict ");
		super.handleCreationDict(options);
	}
	
	@Kroll.method
	public void redraw() {
		if (view != null) {
			((TiShapeView)view).redrawNativeView();
		}
	}
	@Kroll.method
	public void update() {
		if (view != null) {
			((TiShapeView)view).update();
			((TiShapeView)view).redrawNativeView();
		}
	}
	
	private void addShape(ShapeProxy proxy) {
		if (!mShapes.contains(proxy)) {
			mShapes.add(proxy);
			proxy.setShapeViewProxy(this);
			redraw();
		}
	}

	private void removeShape(ShapeProxy proxy) {
		if (!mShapes.contains(proxy))
			return;
		mShapes.remove(proxy);
		proxy.setShapeViewProxy(null);
		redraw();
	}
	
	@Kroll.method
	public void add(Object shape) {
		Log.d(TAG, "add", Log.DEBUG_MODE);
		if (!(shape instanceof ShapeProxy)) {
			Log.e(TAG, "add: must be a Shape");
			return;
		}
		addShape((ShapeProxy)shape);
	}

	@Kroll.method
	public void remove(Object shape) {
		Log.d(TAG, "remove", Log.DEBUG_MODE);
		if (!(shape instanceof ShapeProxy)) {
			Log.e(TAG, "remove: must be a shape");
			return;
		}
		removeShape((ShapeProxy)shape);
	}
}